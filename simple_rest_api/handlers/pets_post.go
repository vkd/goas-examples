// Code is generated by goas. DO NOT EDIT!

package handlers

import (
	"encoding/json"
	"net/http"
)

// PetsPostFunc ...
type PetsPostFunc func(PetsPostRequest) PetsPostResponser

// PetsPostHandlerFunc ...
func PetsPostHandlerFunc(fn PetsPostFunc) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var req PetsPostRequest
		var err error
		_ = err

		err = json.NewDecoder(r.Body).Decode(&req.Body)
		if err != nil {
			PetsPostErrorHandler(w, r, JSONDecodeError{Err: err})
			return
		}

		fn(req).write(w)
	}
}

// PetsPostErrorHandler ...
var PetsPostErrorHandler = ErrorHandler

// PetsPostRequest ...
type PetsPostRequest struct {
	Body PetCreateBody
}

// PetsPostResponser ...
type PetsPostResponser interface {
	write(http.ResponseWriter)
	petspostresponseinterface()
}

// PetsPostResponseJSON201 ...
func PetsPostResponseJSON201() PetsPostResponser {
	var w petsPostJSONResponse
	w.StatusCode = 201
	return w
}

// PetsPostResponseJSONDefault ...
func PetsPostResponseJSONDefault(resp Error) PetsPostResponser {
	var w petsPostJSONResponse
	w.Obj = resp
	return w
}

// --- Response interface ---

type petsPostJSONResponse struct {
	StatusCode int
	Obj        interface{}
}

var _ PetsPostResponser = (*petsPostJSONResponse)(nil)

func (rw petsPostJSONResponse) petspostresponseinterface() {}

func (rw petsPostJSONResponse) write(w http.ResponseWriter) {
	w.WriteHeader(rw.StatusCode)
	err := json.NewEncoder(w).Encode(rw.Obj)
	if err != nil {
		JSONError(err)
	}
}
