// Code is generated by goas. DO NOT EDIT!

package handlers

import (
	"encoding/json"
	"net/http"
	"net/url"
	"strconv"
)

// PetsGetFunc ...
type PetsGetFunc func(PetsGetRequest) PetsGetResponser

// PetsGetHandlerFunc ...
func PetsGetHandlerFunc(fn PetsGetFunc) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var req PetsGetRequest
		var err error
		_ = err
		req.Headers.Authorization = r.Header.Get("Authorization")
		req.Query.Limit, err = parseParametersLimitInQuery(r.URL.Query())
		if err != nil {
			PetsGetErrorHandler(w, r, BadRequest{In: "query", Field: "limit", Err: err})
			return
		}

		fn(req).write(w)
	}
}

// PetsGetErrorHandler ...
var PetsGetErrorHandler = ErrorHandler

// PetsGetRequest ...
type PetsGetRequest struct {
	Headers struct {
		Authorization string
	}
	Query struct {
		Limit int32
	}
}

// PetsGetResponser ...
type PetsGetResponser interface {
	write(http.ResponseWriter)
	petsgetresponseinterface()
}

// PetsGetResponseJSON200 ...
func PetsGetResponseJSON200(resp Pets) PetsGetResponser {
	var w petsGetJSONResponse
	w.StatusCode = 200
	w.Obj = resp
	return w
}

// PetsGetResponseJSONDefault ...
func PetsGetResponseJSONDefault(resp Error) PetsGetResponser {
	var w petsGetJSONResponse
	w.Obj = resp
	return w
}

// --- Response interface ---

type petsGetJSONResponse struct {
	StatusCode int
	Obj        interface{}
}

var _ PetsGetResponser = (*petsGetJSONResponse)(nil)

func (rw petsGetJSONResponse) petsgetresponseinterface() {}

func (rw petsGetJSONResponse) write(w http.ResponseWriter) {
	w.WriteHeader(rw.StatusCode)
	err := json.NewEncoder(w).Encode(rw.Obj)
	if err != nil {
		JSONError(err)
	}
}

func parseParametersLimitInQuery(query url.Values) (out int32, err error) {
	var v string
	vs, ok := query["limit"]
	if ok && len(vs) > 0 {
		v = vs[0]
	}

	if ok {
		i, err := strconv.ParseInt(v, 10, 32)
		if err != nil {
			return 0, ErrParseField{In: "query", Field: "limit", Err: err}
		}
		out = int32(i)
	}

	return
}
